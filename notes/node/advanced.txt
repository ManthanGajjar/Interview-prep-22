> how event emitter works
    > EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
> why node js, but not PHP and other API technologies
> is nodejs is secure enough?
    > not much, morely the express framework is used widely and many packages are not comes with good in-built security
> ways to make node secure
    > use lib > helmet 
        > Helmet helps you secure your Express apps by setting various HTTP headers. It's not a silver bullet, but it can help! 
> what is libuv and how it works
> js heap > where memory allocation happens
> to understand callback: http://latentflip.com/
> callback in JS -> https://www.freecodecamp.org/news/javascript-callback-functions-what-are-callbacks-in-js-and-how-to-use-them/
> can we pass objects to functions as parameters? => Yes (using callbacks).
> life cycle of node js.
> Javascript engine (V8, Spidermonkey, JavaScriptCore etc..)
> what is closure
    > InnerFunction() can access outerVariable even if it will be executed separately.
> use of closure -> https://stackoverflow.com/a/2728341 ( to hide private method inside functions )
> good example of closure -> https://stackoverflow.com/a/39045098
> what is lexical scoping
    >  Lexical scope means that in a nested group of functions, the inner functions have access to the variables 
        and other resources of their parent scope. This means that the child functions are lexically bound to the 
        execution context of their parents. Lexical scope is sometimes also referred to as static scope.
> Function scope, Block Scope, Lexical Scope => https://stackoverflow.com/a/56374199
> this vs self 
   > within the inner function, "this" refers to the object calling the inner function while
    "self" refers to the object which called the outer function to create the reference to the inner function.
> in built node packages
> how redis works 
> An anonymous function is a function without a name
> js is not case-sensitive
> blocking code vs non blocking code
> event driven design pattern
> event life cycle
> function stack: The call stack is a LIFO (Last In, First Out) stack. 
    The event loop continuously checks the call stack to see if there's any function that needs to run.
> event queue
> bubbling
> babel

